{"version":3,"sources":["App.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/UI/SideDrawer.jsx","shared/components/Navigation/MainNavigation.js","shared/components/UI/LoadingSpinner/LoadingSpinner.js","registerServiceWorker.js","store/store.js","index.js","shared/utils/thunk-helper.js","store/authSlice.js"],"names":["logoutTimer","MainHeader","children","className","NavLinks","isLoggedIn","useSelector","state","auth","login","uid","userId","dispatch","useDispatch","to","exact","onClick","authActions","authReset","SideDrawer","isOpen","onClose","placement","borderBottomWidth","MainNavigation","props","useDisclosure","onOpen","Fragment","Hamburger","display","lg","fontSize","color","_hover","cursor","mr","LoadingSpinner","asOverlay","Users","React","lazy","NewPlace","UpdatePlace","UserPlaces","Auth","App","routes","tokenExpirationDate","expiration","token","useEffect","storedData","JSON","parse","localStorage","getItem","Date","localLogin","toISOString","remainingTime","getTime","setTimeout","clearTimeout","path","component","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","store","configureStore","reducer","authSlice","devTools","process","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","postThunk","url","axios","payload","thunkAPI","a","post","fulfillWithValue","data","rejectWithValue","message","instance","create","authSignup","createAsyncThunk","authLogin","initialState","createSlice","name","reducers","removeItem","action","extraReducers","pending","loading","user","fulfilled","rejected","setItem","stringify","actions"],"mappings":"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","file":"static/js/main.45ab1250.chunk.js","sourcesContent":["import React, { Suspense, useEffect } from \"react\";\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Route,\n    Switch,\n} from \"react-router-dom\";\n//import NewPlace from \"./places/pages/NewPlace.js\";\n//import UpdatePlace from \"./places/pages/UpdatePlace.js\";\n//import UserPlaces from \"./places/pages/UserPlaces.js\";\n//import Auth from \"./users/pages/Auth.js\";\n//import Users from \"./users/pages/Users.js\";\nimport MainNavigation from \"./shared/components/Navigation/MainNavigation.js\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { authActions } from \"./store/authSlice.js\";\nimport LoadingSpinner from \"./shared/components/UI/LoadingSpinner/LoadingSpinner\";\n\nconst Users = React.lazy(() => import(\"./users/pages/Users.js\"));\nconst NewPlace = React.lazy(() => import(\"./places/pages/NewPlace.js\"));\nconst UpdatePlace = React.lazy(() => import(\"./places/pages/UpdatePlace.js\"));\nconst UserPlaces = React.lazy(() => import(\"./places/pages/UserPlaces.js\"));\nconst Auth = React.lazy(() => import(\"./users/pages/Auth.js\"));\n\nlet logoutTimer;\n\nconst App = () => {\n    const tokenExpirationDate = useSelector(\n        (state) => state.auth.login.expiration\n    );\n    const token = useSelector((state) => state.auth.login.token);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const storedData = JSON.parse(localStorage.getItem(\"userData\"));\n        if (\n            storedData &&\n            storedData.token &&\n            new Date() < new Date(storedData.expiration)\n        ) {\n            dispatch(\n                authActions.localLogin({\n                    ...storedData,\n                    expiration: new Date(storedData.expiration).toISOString(),\n                })\n            );\n        }\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (token && tokenExpirationDate) {\n            const remainingTime =\n                new Date(tokenExpirationDate).getTime() - new Date().getTime();\n\n            logoutTimer = setTimeout(() => {\n                dispatch(authActions.authReset());\n            }, remainingTime);\n        } else {\n            clearTimeout(logoutTimer);\n        }\n    }, [token, tokenExpirationDate, dispatch]);\n\n    let routes;\n    if (token) {\n        routes = (\n            <Switch>\n                <Route path=\"/\" component={Users} exact />\n                <Route path=\"/:userId/places\" component={UserPlaces} exact />\n                <Route path=\"/places/new\" component={NewPlace} exact />\n                <Route path=\"/places/:placeId\" component={UpdatePlace} exact />\n                <Redirect to=\"/\" />\n            </Switch>\n        );\n    } else {\n        routes = (\n            <Switch>\n                <Route path=\"/\" component={Users} exact />\n                <Route path=\"/:userId/places\" component={UserPlaces} exact />\n                <Route path=\"/auth\" component={Auth} exact />\n                <Redirect to=\"/auth\" />\n            </Switch>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Router>\n                <MainNavigation />\n                <main className=\"\">\n                    <Suspense\n                        fallback={\n                            <div className=\"center\">\n                                <LoadingSpinner />\n                            </div>\n                        }\n                    >\n                        {routes}\n                    </Suspense>\n                </main>\n            </Router>\n        </React.Fragment>\n    );\n};\n\nexport default App;\n","import React from \"react\";\r\n\r\nimport \"./MainHeader.css\";\r\n\r\nconst MainHeader = ({ children }) => {\r\n  return <header className=\"main-header\">{children}</header>;\r\n};\r\n\r\nexport default MainHeader;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport \"./NavLinks.css\";\r\nimport { authActions } from \"../../../store/authSlice\";\r\n\r\nconst NavLinks = () => {\r\n    const isLoggedIn = useSelector((state) => state.auth.login.isLoggedIn);\r\n    const uid = useSelector((state) => state.auth.login.userId);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ul className=\"nav-links\">\r\n            <li>\r\n                <NavLink to=\"/\" exact>\r\n                    ALL USERS\r\n                </NavLink>\r\n            </li>\r\n            {isLoggedIn && (\r\n                <li>\r\n                    <NavLink to={`/${uid}/places`}>MY PLACES</NavLink>\r\n                </li>\r\n            )}\r\n            {isLoggedIn && (\r\n                <li>\r\n                    <NavLink to=\"/places/new\">ADD PLACE</NavLink>\r\n                </li>\r\n            )}\r\n            {!isLoggedIn && (\r\n                <li>\r\n                    <NavLink to=\"/auth\">AUTHENTICATE</NavLink>\r\n                </li>\r\n            )}\r\n            {isLoggedIn && (\r\n                <li>\r\n                    <button onClick={() => dispatch(authActions.authReset())}>\r\n                        LOGOUT\r\n                    </button>\r\n                </li>\r\n            )}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default NavLinks;\r\n","import React from \"react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n} from \"@chakra-ui/react\";\r\nimport NavLinks from \"../Navigation/NavLinks\";\r\n\r\nconst SideDrawer = ({ isOpen, onClose }) => {\r\n  return (\r\n    <Drawer placement=\"left\" isOpen={isOpen} onClose={onClose}>\r\n      <DrawerOverlay />\r\n      <DrawerContent>\r\n        <DrawerHeader borderBottomWidth=\"1px\"></DrawerHeader>\r\n        <DrawerBody>\r\n          <NavLinks />\r\n        </DrawerBody>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default SideDrawer;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport MainHeader from \"./MainHeader\";\r\nimport NavLinks from \"./NavLinks\";\r\nimport \"./MainNavigation.css\";\r\nimport SideDrawer from \"../UI/SideDrawer\";\r\nimport { useDisclosure } from \"@chakra-ui/react\";\r\nimport { HamburgerIcon } from \"@chakra-ui/icons\";\r\n\r\nconst MainNavigation = (props) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <SideDrawer onClose={onClose} isOpen={isOpen} />\r\n\r\n      <MainHeader>\r\n        <HamburgerIcon\r\n          display={{ lg: \"none\" }}\r\n          fontSize=\"3rem\"\r\n          color=\"white\"\r\n          _hover={{ cursor: \"pointer\" }}\r\n          mr=\"2rem\"\r\n          onClick={onOpen}\r\n        />\r\n\r\n        <h1 className=\"main-navigation__title\">\r\n          <Link to=\"/\">YourPlaces</Link>\r\n        </h1>\r\n        <nav className=\"main-navigation__header-nav\">\r\n          <NavLinks />\r\n        </nav>\r\n      </MainHeader>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MainNavigation;\r\n","import React from \"react\";\r\n\r\nimport \"./LoadingSpinner.css\";\r\n\r\nconst LoadingSpinner = (props) => {\r\n    return (\r\n        <div className={`${props.asOverlay && \"loading-spinner__overlay\"}`}>\r\n            <div className=\"lds-dual-ring\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport authSlice from \"./authSlice\";\r\n\r\nconst store = configureStore({\r\n    // Add reducers here\r\n    reducer: {\r\n        auth: authSlice,\r\n    },\r\n    devTools: process.env.REACT_APP_DEBUG === \"true\",\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <ChakraProvider>\n            <App />\n        </ChakraProvider>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\nregisterServiceWorker();\n","export const postThunk = (url, axios) => async (payload, thunkAPI) => {\r\n    try {\r\n        const response = await axios.post(url, payload);\r\n        return thunkAPI.fulfillWithValue(response.data);\r\n    } catch (e) {\r\n        return thunkAPI.rejectWithValue(\r\n            e.response.data.message || e.message || \"Something Went Wrong...\"\r\n        );\r\n    }\r\n};\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { postThunk } from \"../shared/utils/thunk-helper\";\r\n\r\nconst instance = axios.create({\r\n    headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n});\r\n\r\nconst authSignup = createAsyncThunk(\r\n    \"auth/signup\",\r\n    postThunk(`${process.env.REACT_APP_BASE_URL}/users/signup`, instance)\r\n);\r\n\r\nconst authLogin = createAsyncThunk(\r\n    \"auth/login\",\r\n    postThunk(`${process.env.REACT_APP_BASE_URL}/users/login`, axios)\r\n);\r\n\r\nconst initialState = {\r\n    login: { isLoggedIn: false },\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: \"auth\",\r\n    initialState,\r\n    reducers: {\r\n        authReset: (state) => {\r\n            state = initialState;\r\n            localStorage.removeItem(\"userData\");\r\n            return state;\r\n        },\r\n        localLogin: (state, action) => {\r\n            state.login = { ...action.payload, isLoggedIn: true };\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [authSignup.pending]: (state, action) => {\r\n            state.loading = true;\r\n            state.user = null;\r\n        },\r\n        [authSignup.fulfilled]: (state, action) => {\r\n            state.loading = false;\r\n            state.error = null;\r\n            state.user = action.payload;\r\n        },\r\n        [authSignup.rejected]: (state, action) => {\r\n            state.loading = false;\r\n            state.error = action.payload;\r\n            state.user = null;\r\n        },\r\n        [authLogin.pending]: (state, action) => {\r\n            state.login.loading = true;\r\n            state.login.isLoggedIn = false;\r\n            state.login.token = null;\r\n        },\r\n        [authLogin.fulfilled]: (state, action) => {\r\n            state.login.loading = false;\r\n            state.login.error = null;\r\n            state.login.userId = action.payload.userId;\r\n            state.login.token = action.payload.token;\r\n            state.login.isLoggedIn = !!state.login.token;\r\n\r\n            localStorage.setItem(\r\n                \"userData\",\r\n                JSON.stringify({\r\n                    userId: state.login.userId,\r\n                    token: state.login.token,\r\n                    expiration: new Date(\r\n                        new Date().getTime() + 1000 * 60 * 60\r\n                    ).toISOString(),\r\n                })\r\n            );\r\n        },\r\n        [authLogin.rejected]: (state, action) => {\r\n            state.login.loading = false;\r\n            state.login.isLoggedIn = false;\r\n            state.login.error = action.payload;\r\n            state.login.token = null;\r\n        },\r\n    },\r\n});\r\n\r\nexport const authActions = { ...authSlice.actions, authSignup, authLogin };\r\n\r\nexport default authSlice.reducer;\r\n"],"sourceRoot":""}